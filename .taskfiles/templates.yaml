version: "3"

vars:
  TEMPLATE_ROOT_DIR: "{{.PROJECT_DIR}}/.templates"
  TEMPLATE_DESTINATION_FILENAME: destination.tpl
  TEMPLATE_BODY_FILENAME: template.yaml.tpl

tasks:
  new-template:
    desc: Create a new template
    preconditions:
      - sh: "[ '{{.template}}' != '<no value>' ]"
        msg: "Variable .template is not set"
    cmds:
      - mkdir -p {{.TEMPLATE_ROOT_DIR}}/{{.template}}
      - touch {{.TEMPLATE_ROOT_DIR}}/{{.template}}/{{"{"}}{{.TEMPLATE_BODY_FILENAME}},{{.TEMPLATE_DESTINATION_FILENAME}}{{"}"}}

  template-full:
    desc: Render all templates
    cmds:
      - task: template
        vars:
          template: helmrelease
      - task: template
        vars:
          template: kustomization
      - task: template
        vars:
          template: namespace
      - task: template
        vars:
          template: helmrepository

  template-kustomization:
    desc: Render templates for a single customization
    cmds:
      - task: template
        vars:
          template: helmrelease
      - task: template
        vars:
          template: kustomization
      - task: template
        vars:
          template: namespace

  template-volsync:
    desc: Render templates for a single volsync
    cmds:
      - task: template
        vars:
          template: replicationsource
      - task: template
        vars:
          template: restic-kustomization
      - task: template
        vars:
          template: secret-config-restic
      - task: template
        vars:
          template: namespace
      - task: k-kustomize-dir
        vars:
          dir: cluster/{{.name}}

  template:
    desc: Render a template from the .templates dir
    silent: true
    vars:
      namespace: "{{.ns}}"
      template_dir: "{{.TEMPLATE_ROOT_DIR}}/{{.template}}"
      src: "{{.template_dir}}/{{.TEMPLATE_BODY_FILENAME}}"
      dst_rel:
        sh: export namespace={{.namespace}} name={{.name}}; envsubst '${name},${namespace}' < {{.template_dir}}/{{.TEMPLATE_DESTINATION_FILENAME}}
      dst: "{{.PROJECT_DIR}}{{.dst_rel}}"
    preconditions:
      - sh: "[ '{{.name}}' != '<no value>' ]"
        msg: "Variable .name is not set"
      - sh: "[ '{{.namespace}}' != '<no value>' ]"
        msg: "Variable .namespace is not set"
      - sh: "[ '{{.template}}' != '<no value>' ]"
        msg: "Variable .template is not set"
    sources:
      - "{{.src}}"
    generates:
      - "{{.dst}}"
    cmds:
      - echo "Creating {{.dst_rel}}..."
      - mkdir -p $(dirname {{.dst}})
      - export namespace={{.namespace}} name={{.name}}; envsubst '${name},${namespace}' < {{.src}} > {{.dst}}

  k-secret:
    desc: generate an empty kubernetes secret
    vars:
      namespace: "{{.ns}}"
      literal: "{{.literal}}"
    preconditions:
      - sh: "[ '{{.name}}' != '<no value>' ]"
        msg: "Variable .name is not set"
      - sh: "[ '{{.namespace}}' != '<no value>' ]"
        msg: "Variable .namespace is not set"
    cmds:
      - kubectl -n {{.namespace}} create secret generic {{.name}} --from-literal=test=value --dry-run=client -o yaml

  k-kustomize-dir:
    desc: Add a kustomization.yaml into the current directory that adds all other files as resources
    vars:
      ns: '{{.ns | default "default"}}'
      pwd:
        sh: pwd
      dir: '{{.dir | default .pwd}}'
      kustomization_file: '{{.dir}}/kustomization.yaml'
    preconditions:
      - sh: "[ ! -f '{{.kustomzation_file}}' ]"
        msg: "{{.kustomization_file}} already exists"
    cmds:
      - |
        cat > '{{.kustomization_file}}' << EOL
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        namespace: {{.ns}}
        resources:
        EOL

      - git ls-files -cmo --exclude-standard --deduplicate '{{.dir}}' | grep -v "{{.dir}}/[^/]*/" | grep -v /$ | grep -v "kustomization.yaml" | sed 's#{{.dir}}/##'  | sed 's/^/ - /' >> '{{.kustomization_file}}'

  k-disable:
    desc: disable a kustomization from the bootstrap dir
    preconditions:
      - sh: "[ '{{.name}}' != '<no value>' ]"
        msg: "Variable .name is not set"
    cmds:
      - mv bootstrap/kustomizations/*{{.name}}* disabled/kustomizations/

  k-enable:
    desc: enable a kustomization from the disabled dir
    preconditions:
      - sh: "[ '{{.name}}' != '<no value>' ]"
        msg: "Variable .name is not set"
    cmds:
      - mv disabled/kustomizations/*{{.name}}* bootstrap/kustomizations/