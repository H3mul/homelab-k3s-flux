- hosts: all

  vars:
    host_domain: "{{ lookup('env','HOST_DOMAIN') }}"
    acme_email: "{{ lookup('env','ACME_EMAIL') }}"
    timezone: "{{ lookup('env','TZ', default='America/Vancouver') }}"
    mongo_db_admin_user: "{{ lookup('env','MONGO_ADMIN_USER') }}"
    mongo_db_admin_pass: "{{ lookup('env','MONGO_ADMIN_PASS') }}"
    mongo_db_pritunl_user: "{{ lookup('env','MONGO_PRITUNL_USER') }}"
    mongo_db_pritunl_pass: "{{ lookup('env','MONGO_PRITUNL_PASS') }}"
    mongo_db_pritunl_db: "{{ lookup('env','MONGO_PRITUNL_DB') }}"
    mongo_db_dump_local_dest: "{{ lookup('env','MONGO_DUMP_DEST') }}"
    traefik_access_logs_dir: "/var/log/traefik"
    traefik_access_logs: "{{ traefik_access_logs_dir }}/access.log"
    ssh_port: 34581

  collections:
    - h3mul.common

  roles:
    - role: docker-mongo-db-dump
      vars:
        mongo_db_dump_mongo_container_name: "mongo"
        mongo_db_dump_user: "{{ mongo_db_admin_user }}"
        mongo_db_dump_pass: "{{ mongo_db_admin_pass }}"
        mongo_db_dump_file_name: "mongo.dump.{{ ansible_host }}"

    - role: apt-packages
      tags: apt-packages
      vars:
        apt_upgrade: safe
        apt_packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools

    - role: fail2ban
      tags: fail2ban
      vars:
        fail2ban_use_traefik_filters: true
        fail2ban_services:
          - name: sshd
            port: "{{ ssh_port }}"
            bantime: 3600

          - name: traefik-auth
            chain: DOCKER-USER
            logpath: "{{ traefik_access_logs }}"
            bantime: 3600
            port: http,https

          - name: traefik-botsearch
            chain: DOCKER-USER
            logpath: "{{ traefik_access_logs }}"
            bantime: 3600
            port: http,https

          - name: traefik-badbots
            chain: DOCKER-USER
            logpath: "{{ traefik_access_logs }}"
            port: http,https
            bantime: 3600
            filter: apache-badbots

    - role: ufw
      tags: ufw
      vars:
        ufw_allowed_ports_in:
          - port: "{{ ssh_port }}"
            proto: tcp

    - role: ssh-server
      tags: ssh-server
      vars:
        sshd_port: "{{ ssh_port }}"

    - role: import-ssh-keys
      tags: import-ssh-keys
      vars:
        ssh_keys_gh_users: [ "h3mul" ]

    - role: docker
      tags: docker

  tasks:
    # - name: Remove project
    #   community.docker.docker_compose:
    #     project_src: pritunl
    #     state: absent

    - name: Reconcile pritunl stack
      community.docker.docker_compose:
        project_name: pritunl
        definition:
          services:
            mongo:
              image: mongo:8.0.6@sha256:1cb283500219e8fc0b61b328ea5a199a395a753d88b17351c58874fb425223cb
              container_name: mongo
              networks:
                - pritunl
              volumes:
                - mongo-data:/data/db
              environment:
                MONGO_INITDB_ROOT_USERNAME: "{{ mongo_db_admin_user }}"
                MONGO_INITDB_ROOT_PASSWORD: "{{ mongo_db_admin_pass }}"
              restart: unless-stopped

            pritunl:
              image: ghcr.io/h3mul/pritunl:v1.32.3660.72@sha256:69c77b9e209a2011671692aa51636048da180c8db95eb63289a36a7eec839c29
              container_name: pritunl
              networks:
                - pritunl
                - proxy
              privileged: true
              sysctls:
                - net.ipv6.conf.all.disable_ipv6=0
              ports:
                - 14951:14951/udp
                - 16614:16614/udp
              environment:
                TZ: "{{ timezone }}"
                REVERSE_PROXY: "true"
                MONGODB_URI: mongodb://{{ mongo_db_pritunl_user }}:{{ mongo_db_pritunl_pass }}@mongo:27017/{{ mongo_db_pritunl_db }}?authSource=admin
              volumes:
                - pritunl-session:/var/lib/pritunl
              depends_on:
                - mongo
              restart: unless-stopped
              labels:
                traefik.enable: "true"
                traefik.docker.network: pritunl_proxy
                traefik.http.services.pritunl.loadbalancer.server.port:    9700
                traefik.http.services.pritunl.loadbalancer.server.scheme:  http

                traefik.http.routers.pritunl.service:          pritunl
                traefik.http.routers.pritunl.rule:             "Host(`pritunl.{{ host_domain }}`)"
                traefik.http.routers.pritunl.entrypoints:      "websecure"
                traefik.http.routers.pritunl.tls:              "true"
                traefik.http.routers.pritunl.tls.certresolver: "letsencryptresolver"

            traefik:
              image: traefik:v3.2@sha256:e561a37f8710d9cf41c78bdf421d822b2c0b48267ec0552e644565fb55466ea9
              container_name: traefik
              ports:
                - 80:80
                - 443:443
              volumes:
                - traefik-certs:/letsencrypt
                - "{{ traefik_access_logs_dir }}:/logs"
                - /var/run/docker.sock:/var/run/docker.sock:ro
              networks:
                - proxy
              restart: unless-stopped
              dns:
                - 1.1.1.1
                - 8.8.8.8
              command:
                - --log.level=INFO
                - --accesslog=true
                - --accesslog.filePath=/logs/access.log
                - --providers.docker=true
                - --providers.docker.exposedbydefault=false
                - --serverstransport.insecureskipverify=true
                - --entrypoints.web.address=:80
                - --entrypoints.websecure.address=:443
                - --certificatesresolvers.letsencryptresolver.acme.tlschallenge=true
                - --certificatesresolvers.letsencryptresolver.acme.email={{ acme_email }}
                - --certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json
                  # Use letsencrypt staging
                # - --certificatesresolvers.letsencryptresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
                # - --accesslog=true
                # - --api
                # - --api.dashboard
                # - --api.insecure=true

            wireguard:
              image: linuxserver/wireguard:1.0.20210914@sha256:0dfaeb571eb3cf438d5c34508d49d7bf29df938d408a92da0448a9e8328a7819
              container_name: wireguard
              environment:
                LOG_CONFS: "true"
              cap_add:
                - NET_ADMIN
              volumes:
                - wireguard-conf:/config
              ports:
                # port for wireguard-ui. this must be set here as the `wireguard-ui` container joins the network of this container and hasn't its own network over which it could publish the ports
                # port of the wireguard server
                - 51820:51820/udp
              restart: unless-stopped

            wireguard-ui:
              image: ngoduykhanh/wireguard-ui:0.6.2@sha256:5213a3a3248441c3934ac522ee2c76656367e2edc009b55bc5e881b9d6105b88
              container_name: wireguard-ui
              depends_on:
                - wireguard
              cap_add:
                - NET_ADMIN
              environment:
                WGUI_MANAGE_START: "true"
                WGUI_MANAGE_RESTART: "true"
                WGUI_CONFIG_FILE_PATH: /config/wg_confs/wg0.conf
              networks:
                - proxy
              logging:
                driver: json-file
                options:
                  max-size: 50m
              volumes:
                - wireguard-ui-db:/app/db
                - wireguard-conf:/config
              restart: unless-stopped
              labels:
                traefik.enable: "true"
                traefik.docker.network: pritunl_proxy
                traefik.http.services.wireguard-ui.loadbalancer.server.port:    5000
                traefik.http.services.wireguard-ui.loadbalancer.server.scheme:  http
                traefik.http.routers.wireguard-ui.service:          wireguard-ui
                traefik.http.routers.wireguard-ui.rule:             "Host(`wireguard.{{ host_domain }}`)"
                traefik.http.routers.wireguard-ui.entrypoints:      "websecure"
                traefik.http.routers.wireguard-ui.tls:              "true"
                traefik.http.routers.wireguard-ui.tls.certresolver: "letsencryptresolver"


          networks:
            pritunl:
            proxy:

          volumes:
            pritunl-session:
            traefik-certs:
            mongo-data:
            wireguard-conf:
            wireguard-ui-db:

      register: docker_compose_output

    - name: Show results
      ansible.builtin.debug:
        var: docker_compose_output

    - name: Verify that containers are up
      ansible.builtin.assert:
        that:
          - "docker_compose_output.services.pritunl.pritunl.state.running"
          - "docker_compose_output.services.mongo.mongo.state.running"
          - "docker_compose_output.services.traefik.traefik.state.running"

    - name: prune docker images to save space
      shell: docker image prune -f
